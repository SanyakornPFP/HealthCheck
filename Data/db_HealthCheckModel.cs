//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2/25/2025 9:16:01 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using HealthCheck.Models;
using Microsoft.Extensions.Configuration;

namespace HealthCheck.Data
{

    public partial class db_HealthCheckModel : DbContext
    {

        public db_HealthCheckModel() :
            base()
        {
            OnCreated();
        }

        public db_HealthCheckModel(DbContextOptions<db_HealthCheckModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("db_HealthCheckModelConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Alchkstatu> Alchkstatus
        {
            get;
            set;
        }

        public virtual DbSet<Algender> Algenders
        {
            get;
            set;
        }

        public virtual DbSet<Alienlist> Alienlists
        {
            get;
            set;
        }

        public virtual DbSet<Alnation> Alnations
        {
            get;
            set;
        }

        public virtual DbSet<Alpo> Alpos
        {
            get;
            set;
        }

        public virtual DbSet<Alprefix> Alprefixes
        {
            get;
            set;
        }

        public virtual DbSet<Altype> Altypes
        {
            get;
            set;
        }

        public virtual DbSet<Employee> Employees
        {
            get;
            set;
        }

        public virtual DbSet<Position> Positions
        {
            get;
            set;
        }

        public virtual DbSet<Province> Provinces
        {
            get;
            set;
        }

        public virtual DbSet<Token> Tokens
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Menu> Menus
        {
            get;
            set;
        }

        public virtual DbSet<Permission> Permissions
        {
            get;
            set;
        }

        public virtual DbSet<Healthcheck> Healthchecks
        {
            get;
            set;
        }

        public virtual DbSet<Doctor> Doctors
        {
            get;
            set;
        }

        public virtual DbSet<Hospital> Hospitals
        {
            get;
            set;
        }

        public virtual DbSet<LogSystem> LogSystems
        {
            get;
            set;
        }

        public virtual DbSet<HistoryHealth> HistoryHealths
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.AlchkstatuMapping(modelBuilder);
            this.CustomizeAlchkstatuMapping(modelBuilder);

            this.AlgenderMapping(modelBuilder);
            this.CustomizeAlgenderMapping(modelBuilder);

            this.AlienlistMapping(modelBuilder);
            this.CustomizeAlienlistMapping(modelBuilder);

            this.AlnationMapping(modelBuilder);
            this.CustomizeAlnationMapping(modelBuilder);

            this.AlpoMapping(modelBuilder);
            this.CustomizeAlpoMapping(modelBuilder);

            this.AlprefixMapping(modelBuilder);
            this.CustomizeAlprefixMapping(modelBuilder);

            this.AltypeMapping(modelBuilder);
            this.CustomizeAltypeMapping(modelBuilder);

            this.EmployeeMapping(modelBuilder);
            this.CustomizeEmployeeMapping(modelBuilder);

            this.PositionMapping(modelBuilder);
            this.CustomizePositionMapping(modelBuilder);

            this.ProvinceMapping(modelBuilder);
            this.CustomizeProvinceMapping(modelBuilder);

            this.TokenMapping(modelBuilder);
            this.CustomizeTokenMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.MenuMapping(modelBuilder);
            this.CustomizeMenuMapping(modelBuilder);

            this.PermissionMapping(modelBuilder);
            this.CustomizePermissionMapping(modelBuilder);

            this.HealthcheckMapping(modelBuilder);
            this.CustomizeHealthcheckMapping(modelBuilder);

            this.DoctorMapping(modelBuilder);
            this.CustomizeDoctorMapping(modelBuilder);

            this.HospitalMapping(modelBuilder);
            this.CustomizeHospitalMapping(modelBuilder);

            this.LogSystemMapping(modelBuilder);
            this.CustomizeLogSystemMapping(modelBuilder);

            this.HistoryHealthMapping(modelBuilder);
            this.CustomizeHistoryHealthMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Alchkstatu Mapping

        private void AlchkstatuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alchkstatu>().ToTable(@"Alchkstatus", @"dbo");
            modelBuilder.Entity<Alchkstatu>().Property(x => x.AlchkstatusID).HasColumnName(@"AlchkstatusID").HasColumnType(@"nvarchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Alchkstatu>().Property(x => x.AlchkstatusName).HasColumnName(@"AlchkstatusName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Alchkstatu>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alchkstatu>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alchkstatu>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Alchkstatu>().HasKey(@"AlchkstatusID");
        }

        partial void CustomizeAlchkstatuMapping(ModelBuilder modelBuilder);

        #endregion

        #region Algender Mapping

        private void AlgenderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Algender>().ToTable(@"Algender", @"dbo");
            modelBuilder.Entity<Algender>().Property(x => x.AlgenderID).HasColumnName(@"AlgenderID").HasColumnType(@"nvarchar(1)").IsRequired().ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<Algender>().Property(x => x.AlgenderName).HasColumnName(@"AlgenderName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Algender>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Algender>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Algender>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Algender>().HasKey(@"AlgenderID");
        }

        partial void CustomizeAlgenderMapping(ModelBuilder modelBuilder);

        #endregion

        #region Alienlist Mapping

        private void AlienlistMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alienlist>().ToTable(@"Alienlist", @"dbo");
            modelBuilder.Entity<Alienlist>().Property(x => x.Alcode).HasColumnName(@"Alcode").HasColumnType(@"nvarchar(13)").IsRequired().ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<Alienlist>().Property(x => x.EmpID).HasColumnName(@"EmpID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Alienlist>().Property(x => x.Reqcode).HasColumnName(@"Reqcode").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Alienlist>().Property(x => x.AltypeID).HasColumnName(@"AltypeID").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Alienlist>().Property(x => x.AlprefixID).HasColumnName(@"AlprefixID").HasColumnType(@"nvarchar(1)").ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<Alienlist>().Property(x => x.Alprefixen).HasColumnName(@"Alprefixen").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Alienlist>().Property(x => x.Alnameen).HasColumnName(@"Alnameen").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Alienlist>().Property(x => x.Alsnameen).HasColumnName(@"Alsnameen").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Alienlist>().Property(x => x.Albdate).HasColumnName(@"Albdate").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Alienlist>().Property(x => x.AlgenderID).HasColumnName(@"AlgenderID").HasColumnType(@"nvarchar(1)").ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<Alienlist>().Property(x => x.AlnationID).HasColumnName(@"AlnationID").HasColumnType(@"nvarchar(1)").ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<Alienlist>().Property(x => x.AlposID).HasColumnName(@"AlposID").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<Alienlist>().Property(x => x.Aladdress).HasColumnName(@"Aladdress").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Alienlist>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alienlist>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alienlist>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Alienlist>().HasKey(@"Alcode");
        }

        partial void CustomizeAlienlistMapping(ModelBuilder modelBuilder);

        #endregion

        #region Alnation Mapping

        private void AlnationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alnation>().ToTable(@"Alnation", @"dbo");
            modelBuilder.Entity<Alnation>().Property(x => x.AlnationID).HasColumnName(@"AlnationID").HasColumnType(@"nvarchar(1)").IsRequired().ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<Alnation>().Property(x => x.AlnationName).HasColumnName(@"AlnationName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Alnation>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alnation>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alnation>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Alnation>().HasKey(@"AlnationID");
        }

        partial void CustomizeAlnationMapping(ModelBuilder modelBuilder);

        #endregion

        #region Alpo Mapping

        private void AlpoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alpo>().ToTable(@"Alpos", @"dbo");
            modelBuilder.Entity<Alpo>().Property(x => x.AlposID).HasColumnName(@"AlposID").HasColumnType(@"nvarchar(2)").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<Alpo>().Property(x => x.AlposName).HasColumnName(@"AlposName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Alpo>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alpo>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alpo>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Alpo>().HasKey(@"AlposID");
        }

        partial void CustomizeAlpoMapping(ModelBuilder modelBuilder);

        #endregion

        #region Alprefix Mapping

        private void AlprefixMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alprefix>().ToTable(@"Alprefix", @"dbo");
            modelBuilder.Entity<Alprefix>().Property(x => x.AlprefixID).HasColumnName(@"AlprefixID").HasColumnType(@"nvarchar(1)").IsRequired().ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<Alprefix>().Property(x => x.AlprefixName).HasColumnName(@"AlprefixName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Alprefix>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alprefix>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Alprefix>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Alprefix>().HasKey(@"AlprefixID");
        }

        partial void CustomizeAlprefixMapping(ModelBuilder modelBuilder);

        #endregion

        #region Altype Mapping

        private void AltypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Altype>().ToTable(@"Altype", @"dbo");
            modelBuilder.Entity<Altype>().Property(x => x.AltypeID).HasColumnName(@"AltypeID").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Altype>().Property(x => x.AltypeName).HasColumnName(@"AltypeName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Altype>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Altype>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Altype>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Altype>().HasKey(@"AltypeID");
        }

        partial void CustomizeAltypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Employee Mapping

        private void EmployeeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>().ToTable(@"Employee", @"dbo");
            modelBuilder.Entity<Employee>().Property(x => x.EmpID).HasColumnName(@"EmpID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Employee>().Property(x => x.EmpName).HasColumnName(@"EmpName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Wkaddress).HasColumnName(@"Wkaddress").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.Btname).HasColumnName(@"Btname").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Employee>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Employee>().HasKey(@"EmpID");
        }

        partial void CustomizeEmployeeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Position Mapping

        private void PositionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Position>().ToTable(@"Position", @"dbo");
            modelBuilder.Entity<Position>().Property(x => x.PositionID).HasColumnName(@"PositionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Position>().Property(x => x.PositionName).HasColumnName(@"PositionName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Position>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Position>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Position>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Position>().HasKey(@"PositionID");
        }

        partial void CustomizePositionMapping(ModelBuilder modelBuilder);

        #endregion

        #region Province Mapping

        private void ProvinceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Province>().ToTable(@"Province", @"dbo");
            modelBuilder.Entity<Province>().Property(x => x.ProvinceID).HasColumnName(@"ProvinceID").HasColumnType(@"nvarchar(2)").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<Province>().Property(x => x.ProvinceName).HasColumnName(@"ProvinceName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Province>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Province>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Province>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Province>().HasKey(@"ProvinceID");
        }

        partial void CustomizeProvinceMapping(ModelBuilder modelBuilder);

        #endregion

        #region Token Mapping

        private void TokenMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Token>().ToTable(@"Token", @"dbo");
            modelBuilder.Entity<Token>().Property(x => x.TokenID).HasColumnName(@"TokenID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Token>().Property(x => x.TokenCode).HasColumnName(@"TokenCode").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Token>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Token>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Token>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Token>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Token>().HasKey(@"TokenID");
        }

        partial void CustomizeTokenMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users", @"dbo");
            modelBuilder.Entity<User>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property(x => x.CardID).HasColumnName(@"CardID").HasColumnType(@"nvarchar(13)").ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<User>().Property(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.PositionID).HasColumnName(@"PositionID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<User>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.ImagesPath).HasColumnName(@"ImagesPath").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<User>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<User>().HasKey(@"UserID");
            modelBuilder.Entity<User>().HasIndex(@"Username").IsUnique(true);
            modelBuilder.Entity<User>().HasIndex(@"Email").IsUnique(true);
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Menu Mapping

        private void MenuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Menu>().ToTable(@"Menu", @"dbo");
            modelBuilder.Entity<Menu>().Property(x => x.MenuID).HasColumnName(@"MenuID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Menu>().Property(x => x.MenuName).HasColumnName(@"MenuName").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Menu>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Menu>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Menu>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Menu>().HasKey(@"MenuID");
        }

        partial void CustomizeMenuMapping(ModelBuilder modelBuilder);

        #endregion

        #region Permission Mapping

        private void PermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Permission>().ToTable(@"Permissions", @"dbo");
            modelBuilder.Entity<Permission>().Property(x => x.PermissionsID).HasColumnName(@"PermissionsID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Permission>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Permission>().Property(x => x.MenuID).HasColumnName(@"MenuID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Permission>().Property(x => x.CanView).HasColumnName(@"CanView").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Permission>().Property(x => x.CanCreate).HasColumnName(@"CanCreate").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Permission>().Property(x => x.CanUpdate).HasColumnName(@"CanUpdate").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Permission>().Property(x => x.CanDelete).HasColumnName(@"CanDelete").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Permission>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Permission>().HasKey(@"PermissionsID");
        }

        partial void CustomizePermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region Healthcheck Mapping

        private void HealthcheckMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Healthcheck>().ToTable(@"Healthcheck", @"dbo");
            modelBuilder.Entity<Healthcheck>().Property(x => x.HealthID).HasColumnName(@"HealthID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Healthcheck>().Property(x => x.Alcode).HasColumnName(@"Alcode").HasColumnType(@"nvarchar(13)").ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Alchkhos).HasColumnName(@"Alchkhos").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Healthcheck>().Property(x => x.AlchkstatusID).HasColumnName(@"AlchkstatusID").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Alchkdate).HasColumnName(@"Alchkdate").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Alchkprovid).HasColumnName(@"Alchkprovid").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Licenseno).HasColumnName(@"Licenseno").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Chkname).HasColumnName(@"Chkname").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Chkposition).HasColumnName(@"Chkposition").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Alchkdesc).HasColumnName(@"Alchkdesc").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Healthcheck>().Property(x => x.Alchkdoc).HasColumnName(@"Alchkdoc").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Healthcheck>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Healthcheck>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Healthcheck>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Healthcheck>().Property(x => x.UserIDManage).HasColumnName(@"UserIDManage").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Healthcheck>().HasKey(@"HealthID");
        }

        partial void CustomizeHealthcheckMapping(ModelBuilder modelBuilder);

        #endregion

        #region Doctor Mapping

        private void DoctorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Doctor>().ToTable(@"Doctors", @"dbo");
            modelBuilder.Entity<Doctor>().Property(x => x.DoctorID).HasColumnName(@"DoctorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Doctor>().Property(x => x.DoctorName).HasColumnName(@"DoctorName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Doctor>().Property(x => x.Position).HasColumnName(@"Position").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Doctor>().Property(x => x.Licenseno).HasColumnName(@"Licenseno").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Doctor>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Doctor>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Doctor>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Doctor>().HasKey(@"DoctorID");
        }

        partial void CustomizeDoctorMapping(ModelBuilder modelBuilder);

        #endregion

        #region Hospital Mapping

        private void HospitalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Hospital>().ToTable(@"Hospitals", @"dbo");
            modelBuilder.Entity<Hospital>().Property(x => x.HospitalID).HasColumnName(@"HospitalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Hospital>().Property(x => x.HospitalName).HasColumnName(@"HospitalName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Hospital>().Property(x => x.Address).HasColumnName(@"Address").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Hospital>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Hospital>().Property(x => x.UpdateAt).HasColumnName(@"UpdateAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Hospital>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Hospital>().HasKey(@"HospitalID");
        }

        partial void CustomizeHospitalMapping(ModelBuilder modelBuilder);

        #endregion

        #region LogSystem Mapping

        private void LogSystemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LogSystem>().ToTable(@"LogSystem", @"dbo");
            modelBuilder.Entity<LogSystem>().Property(x => x.LogID).HasColumnName(@"LogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<LogSystem>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LogSystem>().Property(x => x.ActionTitle).HasColumnName(@"ActionTitle").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<LogSystem>().Property(x => x.TableName).HasColumnName(@"TableName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<LogSystem>().Property(x => x.RecordID).HasColumnName(@"RecordID").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<LogSystem>().Property(x => x.TimeStamp).HasColumnName(@"TimeStamp").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<LogSystem>().Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType(@"text").ValueGeneratedNever().HasMaxLength(2147483647);
            modelBuilder.Entity<LogSystem>().HasKey(@"LogID");
        }

        partial void CustomizeLogSystemMapping(ModelBuilder modelBuilder);

        #endregion

        #region HistoryHealth Mapping

        private void HistoryHealthMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<HistoryHealth>().ToTable(@"HistoryHealth", @"dbo");
            modelBuilder.Entity<HistoryHealth>().Property(x => x.HistoryHealthID).HasColumnName(@"HistoryHealthID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<HistoryHealth>().Property(x => x.Alcode).HasColumnName(@"Alcode").HasColumnType(@"nvarchar(13)").IsRequired().ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<HistoryHealth>().Property(x => x.Alnameen).HasColumnName(@"Alnameen").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<HistoryHealth>().Property(x => x.Alchkdate).HasColumnName(@"Alchkdate").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<HistoryHealth>().Property(x => x.UploadDate).HasColumnName(@"UploadDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<HistoryHealth>().Property(x => x.UserIDManage).HasColumnName(@"UserIDManage").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<HistoryHealth>().HasKey(@"HistoryHealthID");
        }

        partial void CustomizeHistoryHealthMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alchkstatu>().HasMany(x => x.Healthchecks).WithOne(op => op.Alchkstatu).IsRequired(false).HasForeignKey(@"AlchkstatusID");

            modelBuilder.Entity<Algender>().HasMany(x => x.Alienlists).WithOne(op => op.Algender).IsRequired(false).HasForeignKey(@"AlgenderID");

            modelBuilder.Entity<Alienlist>().HasOne(x => x.Alpo).WithMany(op => op.Alienlists).IsRequired(false).HasForeignKey(@"AlposID");
            modelBuilder.Entity<Alienlist>().HasOne(x => x.Alprefix).WithMany(op => op.Alienlists).IsRequired(false).HasForeignKey(@"AlprefixID");
            modelBuilder.Entity<Alienlist>().HasOne(x => x.Alnation).WithMany(op => op.Alienlists).IsRequired(false).HasForeignKey(@"AlnationID");
            modelBuilder.Entity<Alienlist>().HasOne(x => x.Algender).WithMany(op => op.Alienlists).IsRequired(false).HasForeignKey(@"AlgenderID");
            modelBuilder.Entity<Alienlist>().HasOne(x => x.Employee).WithMany(op => op.Alienlists).IsRequired(true).HasForeignKey(@"EmpID");
            modelBuilder.Entity<Alienlist>().HasMany(x => x.Healthchecks).WithOne(op => op.Alienlist).IsRequired(false).HasForeignKey(@"Alcode");
            modelBuilder.Entity<Alienlist>().HasOne(x => x.Altype).WithMany(op => op.Alienlists).IsRequired(false).HasForeignKey(@"AltypeID");

            modelBuilder.Entity<Alnation>().HasMany(x => x.Alienlists).WithOne(op => op.Alnation).IsRequired(false).HasForeignKey(@"AlnationID");

            modelBuilder.Entity<Alpo>().HasMany(x => x.Alienlists).WithOne(op => op.Alpo).IsRequired(false).HasForeignKey(@"AlposID");

            modelBuilder.Entity<Alprefix>().HasMany(x => x.Alienlists).WithOne(op => op.Alprefix).IsRequired(false).HasForeignKey(@"AlprefixID");

            modelBuilder.Entity<Altype>().HasMany(x => x.Alienlists).WithOne(op => op.Altype).IsRequired(false).HasForeignKey(@"AltypeID");

            modelBuilder.Entity<Employee>().HasMany(x => x.Alienlists).WithOne(op => op.Employee).IsRequired(true).HasForeignKey(@"EmpID");

            modelBuilder.Entity<Position>().HasMany(x => x.Users).WithOne(op => op.Position).IsRequired(false).HasForeignKey(@"PositionID");

            modelBuilder.Entity<Province>().HasMany(x => x.Healthchecks).WithOne(op => op.Province).IsRequired(false).HasForeignKey(@"Alchkprovid");

            modelBuilder.Entity<User>().HasOne(x => x.Position).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"PositionID");
            modelBuilder.Entity<User>().HasMany(x => x.Permissions).WithOne(op => op.User).IsRequired(false).HasForeignKey(@"UserID");
            modelBuilder.Entity<User>().HasMany(x => x.Healthchecks).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserIDManage");
            modelBuilder.Entity<User>().HasMany(x => x.LogSystems).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserID");

            modelBuilder.Entity<Menu>().HasMany(x => x.Permissions).WithOne(op => op.Menu).IsRequired(false).HasForeignKey(@"MenuID");

            modelBuilder.Entity<Permission>().HasOne(x => x.Menu).WithMany(op => op.Permissions).IsRequired(false).HasForeignKey(@"MenuID");
            modelBuilder.Entity<Permission>().HasOne(x => x.User).WithMany(op => op.Permissions).IsRequired(false).HasForeignKey(@"UserID");

            modelBuilder.Entity<Healthcheck>().HasOne(x => x.Alienlist).WithMany(op => op.Healthchecks).IsRequired(false).HasForeignKey(@"Alcode");
            modelBuilder.Entity<Healthcheck>().HasOne(x => x.Province).WithMany(op => op.Healthchecks).IsRequired(false).HasForeignKey(@"Alchkprovid");
            modelBuilder.Entity<Healthcheck>().HasOne(x => x.User).WithMany(op => op.Healthchecks).IsRequired(true).HasForeignKey(@"UserIDManage");
            modelBuilder.Entity<Healthcheck>().HasOne(x => x.Alchkstatu).WithMany(op => op.Healthchecks).IsRequired(false).HasForeignKey(@"AlchkstatusID");

            modelBuilder.Entity<LogSystem>().HasOne(x => x.User).WithMany(op => op.LogSystems).IsRequired(true).HasForeignKey(@"UserID");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
